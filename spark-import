#!/bin/bash

base=`dirname $0`

hasHelp=false

numExecutor=4
mem=8G
#partitionNum=200
fetchSize=10000
batch=200000
overwrite=false
hivedb="default"

sendHelp() {
 echo -e "\nUsage:\n"
 echo -e "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
 echo -e "--url <jdbc-url>\t\tSpecify JDBC connect string"
 echo -e "--driver <class-name>\t\tManually specify JDBC driver class to use"
 echo -e "-u,--username <username>\tSet authentication username"
 echo -e "-p,--password <password>\tSet authentication password"
 echo -e "-t,--table <table-name>\t\tTable to read. Can not use together with -q|--query"
 echo -e "--where <conditions>\t\tFilter conditions in dataframe"
 echo -e "--cols <col1,col2,...>\t\tImport columns from database. Select in dataframe"
 echo -e "--add-cols <col1,col2,...>\tAdd columns into current dataframe"
 echo -e "-q,--query <sql>\t\tQuery SQL. Can not use together with -t|--table"
 echo -e "--splitBy <n>\t\t\tColumn of the table used to split work unit"
 echo -e "-n,--partitionNum <n>\t\tUse 'n' partitions in spark job. Default 200"
 echo -e "-lb,--lowerbound <n>\t\tPartition's lowerbound"
 echo -e "-up,--upperbound <n>\t\tPartition's upperbound"
 echo -e "-s,--fetch-size <n>\t\tSet number 'n' of rows to fetch from database in each tasks. Default $fetchSize"
 echo -e "-b,--batch <n>\t\t\tImport 'n' rows from database each batchs. Default $batch"
 echo -e "--hive-table <table-name>\tSet the table name to use when importing to hive"
 echo -e "--hive-db <db-name>\t\tSet the hive database to save. Default is [$hivedb]"
 echo -e "--mem <executor-memory>\tSet the memory for each executor"
# echo -e "--hive-partition <key>\t\tSets the partition key to use when importing to hive"
# echo -e "--hive-overwrite\t\tOverwrite existing data in the Hive table"
 echo -e "\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
 hasHelp=true
}

missVal() {
 key=$1
 val=$2
 
 if [ -z "$val" ]; then
  echo "Missing argument for option: $key"
  return 0 
 fi
  return 1
}

while true; do
  case $1 in
    --url)
	if ( missVal $1 $2 ); then
	 sendHelp
	 break
	fi
	url=$2
	shift 2
	;;
    --driver)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	driver=$2
	shift 2
	;;
    -u|--username)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	username=$2
        shift 2
	;;
    -p|--password)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	password=$2
	shift 2
	;;
    -t|--table)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	if [ ! -z "$query" ]; then
	  echo -e "$1 Can not use together with -q|-query"
	  sendHelp
	  break
	fi
	table=$2
	shift 2
	;;
    --where)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
        where=$2
	shift 2
	;;
    --cols)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
        cols=$2
	shift 2
	;;
    --add-cols)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	addCols=$2
	shift 2
	;;
    -q|--query)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi

	if [ ! -z "$table" ]; then
          echo -e "$1 Can not use together with -t|--table"
          sendHelp
          break
        fi

        query=$2
	shift 2
	;;
    --splitBy)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	splitBy=$2
	shift 2
	;;
    -n|--partitionNum)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	partitionNum=$2
	shift 2
	;;
    -lb|--lowerbound)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	lower=$2
	shift 2
	;;
    -ub|--upperbound)
        if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
        upper=$2
	shift 2
        ;;
    -s|--fetch-size)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	fetchSize=$2
	shift 2
	;;
    -b|--batch)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
	batch=$2
	shift 2
	;;
    --hive-table)
	if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
        hiveTable=$2
	shift 2
	;;
    --hive-db)
        if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
        hivedb=$2
        shift 2
        ;;
    --mem)
        if ( missVal $1 $2 ); then
         sendHelp
         break
        fi
        mem=$2
        shift 2
        ;;
#    --hive-partition)
#	if ( missVal ${param[$i]} ${param[(($i + 1))]} ); then
#         sendHelp
#         break
#        fi
#        hivePartition=${param[(($i+1))]}
#        pass=true
#	;;
#    --hive-overwrite)
#	overwrite=true
#	;;
    "")
	break
	;;
    *)
	if [ "$1" = "-h" -o "$1" = "--help" ]; then
  	  echo -e "This is help...\n"
	else
	  echo -e "No such parameter '$1'."
	fi
	sendHelp
	break
  esac
done
if ( ! $hasHelp ); then
 if [ -z "$url" ]; then
  echo "Miss option '--url <jdbc-url>'"
  sendHelp
 elif [ -z "$driver" ]; then
  echo "Miss option '--driver <class-name>'"
  sendHelp
 elif [ -z "$username" ]; then
  echo "Miss option '-u,--username <username>'"
  sendHelp
 elif [ -z "$password" ]; then
  echo "Miss option '-p,--password <password>'"
  sendHelp
 elif [ -z "$table" -a -z "$query" ]; then
  echo "Miss option '-t,--table <table-name>' or '-q,--query <sql>'"
  sendHelp
 elif [ -z "$splitBy" ]; then
  echo "Miss option '--splitBy <n>'"
  sendHelp
 elif [ -z "$hiveTable" ]; then
  echo "Miss option '--hive-table <table-name>'"
  sendHelp
# elif [ -z "$hivePartition" ]; then
#  echo "Miss option '--hive-partition <key>'"
 fi

# if [ "$overwrite" = "true" -a ! -z "$hivePartition" ]; then
#  echo "can not"
# fi
 prop="url=$url\n"
 prop=$prop"driver=$driver\n"
 prop=$prop"username=$username\n"
 prop=$prop"password=$password\n"
 prop=$prop"table=$table\n"
 prop=$prop"where=$where\n"
 prop=$prop"cols=$cols\n"
 prop=$prop"addCols=$addCols\n"
 prop=$prop"query=$query\n"
 prop=$prop"splitBy=$splitBy\n"
 prop=$prop"executors=$numExecutor\n"
 prop=$prop"partitionNum=$partitionNum\n"
 prop=$prop"lowerbound=$lower\n"
 prop=$prop"upperbound=$upper\n"
 prop=$prop"fetchSize=$fetchSize\n"
 prop=$prop"batch=$batch\n"
 prop=$prop"hiveTable=${hivedb}.${hiveTable}\n"
# prop=$prop"hivePartition=$hivePartition\n"
# prop=$prop"overwrite=$overwrite\n"

# echo -e $prop > $base/tmp.properties
 echo -e "$prop" > ./tmp.properties
fi

if ( ! $hasHelp ); then
 spark-submit --master yarn-client --executor-cores 2 --num-executors $numExecutor --driver-memory 2G --executor-memory $mem --conf spark.storage.memoryFraction=0.5 --conf spark.shuffle.memoryFraction=0.1 --conf spark.yarn.executor.memoryOverhead=4096  --conf spark.network.timeout=300 $base/rdbms-import-full_2.10.jar ./tmp.properties
 if [ ! $? -eq 0  ]; then
  echo $hiveTable >> ./error.log
 fi
fi
